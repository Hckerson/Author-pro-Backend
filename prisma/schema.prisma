// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  output        = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Reader {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  email       String      @unique
  password    String?
  provider    String?
  username    String?
  status      String      @default("unverified")
  localStatus Boolean     @default(true)
  phone       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  avatar      Avatar[]
  role        Role        @default(USER)
  team        TeamMember?
  sessions    Session[]
}

model Books {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Author {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Avatar {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      Reader   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  position String
  bio      String?
  linkedIn String?
  user     Reader  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String  @unique @db.ObjectId
}

model Session {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  expires    DateTime
  otpEnabled Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       Reader   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id, userId])
}
